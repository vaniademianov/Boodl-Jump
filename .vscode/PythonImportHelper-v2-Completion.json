[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "isExtraImport": true,
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.utils",
        "description": "other.utils",
        "isExtraImport": true,
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "lst",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FPS",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HOVER_ANIMATION_SPEED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FPS",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "PLAYER_SIZE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SLIDE_IN_ANIMATION_SPEED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "TRANSPARENCY_ANIMATION_SPEED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "COUNT_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "font_txt",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FPS",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GUI_SLOT_COLOR_II",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SECOND_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "COUNT_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "font_txt",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FPS",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "COUNT_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "font_txt",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FIFTH_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FIRST_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FOURTH_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SIXTH_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "THIRD_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FIRST_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FPS",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "RED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SECOND_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "THIRD_INV_COLOR",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "DARK_RED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "ORANGE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "PURPLE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "RED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT_MODIFIER",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "PLAYER_SIZE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "RED",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "PLAYER_SIZE",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "other.cons",
        "description": "other.cons",
        "isExtraImport": true,
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "IBlock",
        "importPath": "blocks.block",
        "description": "blocks.block",
        "isExtraImport": true,
        "detail": "blocks.block",
        "documentation": {}
    },
    {
        "label": "IItem",
        "importPath": "items.item",
        "description": "items.item",
        "isExtraImport": true,
        "detail": "items.item",
        "documentation": {}
    },
    {
        "label": "IItem",
        "importPath": "items.item",
        "description": "items.item",
        "isExtraImport": true,
        "detail": "items.item",
        "documentation": {}
    },
    {
        "label": "IItem",
        "importPath": "items.item",
        "description": "items.item",
        "isExtraImport": true,
        "detail": "items.item",
        "documentation": {}
    },
    {
        "label": "IIMiniItem",
        "importPath": "items.mini_item",
        "description": "items.mini_item",
        "isExtraImport": true,
        "detail": "items.mini_item",
        "documentation": {}
    },
    {
        "label": "Rarity",
        "importPath": "items.rarity",
        "description": "items.rarity",
        "isExtraImport": true,
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Wall",
        "importPath": "player.wall",
        "description": "player.wall",
        "isExtraImport": true,
        "detail": "player.wall",
        "documentation": {}
    },
    {
        "label": "Wall",
        "importPath": "player.wall",
        "description": "player.wall",
        "isExtraImport": true,
        "detail": "player.wall",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "gui.gui_module.element",
        "description": "gui.gui_module.element",
        "isExtraImport": true,
        "detail": "gui.gui_module.element",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "gui.gui_module.element",
        "description": "gui.gui_module.element",
        "isExtraImport": true,
        "detail": "gui.gui_module.element",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "gui.gui_module.element",
        "description": "gui.gui_module.element",
        "isExtraImport": true,
        "detail": "gui.gui_module.element",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "gui.gui_module.element",
        "description": "gui.gui_module.element",
        "isExtraImport": true,
        "detail": "gui.gui_module.element",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "gui.gui_module.element",
        "description": "gui.gui_module.element",
        "isExtraImport": true,
        "detail": "gui.gui_module.element",
        "documentation": {}
    },
    {
        "label": "HOVER",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "HOVER",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "LEFT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "RIGHT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "HOVER",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "LEFT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "RIGHT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "LEFT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "LEFT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "RIGHT_CLICK",
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "isExtraImport": true,
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "Gui",
        "importPath": "gui.gui_module.gui",
        "description": "gui.gui_module.gui",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui",
        "documentation": {}
    },
    {
        "label": "Gui",
        "importPath": "gui.gui_module.gui",
        "description": "gui.gui_module.gui",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui",
        "documentation": {}
    },
    {
        "label": "Gui",
        "importPath": "gui.gui_module.gui",
        "description": "gui.gui_module.gui",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui",
        "documentation": {}
    },
    {
        "label": "Gui",
        "importPath": "gui.gui_module.gui",
        "description": "gui.gui_module.gui",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "importPath": "other.coordinates",
        "description": "other.coordinates",
        "isExtraImport": true,
        "detail": "other.coordinates",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "importPath": "other.coordinates",
        "description": "other.coordinates",
        "isExtraImport": true,
        "detail": "other.coordinates",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "importPath": "other.coordinates",
        "description": "other.coordinates",
        "isExtraImport": true,
        "detail": "other.coordinates",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "importPath": "other.coordinates",
        "description": "other.coordinates",
        "isExtraImport": true,
        "detail": "other.coordinates",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "gui.gui_module.button",
        "description": "gui.gui_module.button",
        "isExtraImport": true,
        "detail": "gui.gui_module.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "gui.gui_module.button",
        "description": "gui.gui_module.button",
        "isExtraImport": true,
        "detail": "gui.gui_module.button",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "inventory.slot",
        "description": "inventory.slot",
        "isExtraImport": true,
        "detail": "inventory.slot",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "inventory.slot",
        "description": "inventory.slot",
        "isExtraImport": true,
        "detail": "inventory.slot",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "inventory.slot",
        "description": "inventory.slot",
        "isExtraImport": true,
        "detail": "inventory.slot",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "gui.gui_module.frame",
        "description": "gui.gui_module.frame",
        "isExtraImport": true,
        "detail": "gui.gui_module.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "gui.gui_module.frame",
        "description": "gui.gui_module.frame",
        "isExtraImport": true,
        "detail": "gui.gui_module.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "gui.gui_module.frame",
        "description": "gui.gui_module.frame",
        "isExtraImport": true,
        "detail": "gui.gui_module.frame",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "gui.gui_module.label",
        "description": "gui.gui_module.label",
        "isExtraImport": true,
        "detail": "gui.gui_module.label",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "gui.gui_module.label",
        "description": "gui.gui_module.label",
        "isExtraImport": true,
        "detail": "gui.gui_module.label",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "gui.gui_module.label",
        "description": "gui.gui_module.label",
        "isExtraImport": true,
        "detail": "gui.gui_module.label",
        "documentation": {}
    },
    {
        "label": "MiniCraftingTable",
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "isExtraImport": true,
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "CraftingTable",
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "isExtraImport": true,
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "CraftingTable",
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "isExtraImport": true,
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "inventory",
        "importPath": "inventory.inventory",
        "description": "inventory.inventory",
        "isExtraImport": true,
        "detail": "inventory.inventory",
        "documentation": {}
    },
    {
        "label": "inventory",
        "importPath": "inventory.inventory",
        "description": "inventory.inventory",
        "isExtraImport": true,
        "detail": "inventory.inventory",
        "documentation": {}
    },
    {
        "label": "inventory",
        "importPath": "inventory.inventory",
        "description": "inventory.inventory",
        "isExtraImport": true,
        "detail": "inventory.inventory",
        "documentation": {}
    },
    {
        "label": "GUIslot",
        "importPath": "gui.gui_module.gui_slot",
        "description": "gui.gui_module.gui_slot",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui_slot",
        "documentation": {}
    },
    {
        "label": "GUIslot",
        "importPath": "gui.gui_module.gui_slot",
        "description": "gui.gui_module.gui_slot",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui_slot",
        "documentation": {}
    },
    {
        "label": "o_irs",
        "importPath": "gui.gui_module.irs",
        "description": "gui.gui_module.irs",
        "isExtraImport": true,
        "detail": "gui.gui_module.irs",
        "documentation": {}
    },
    {
        "label": "o_irs",
        "importPath": "gui.gui_module.irs",
        "description": "gui.gui_module.irs",
        "isExtraImport": true,
        "detail": "gui.gui_module.irs",
        "documentation": {}
    },
    {
        "label": "o_irs",
        "importPath": "gui.gui_module.irs",
        "description": "gui.gui_module.irs",
        "isExtraImport": true,
        "detail": "gui.gui_module.irs",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "gui.gui_module.image",
        "description": "gui.gui_module.image",
        "isExtraImport": true,
        "detail": "gui.gui_module.image",
        "documentation": {}
    },
    {
        "label": "gui",
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "isExtraImport": true,
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "CraftingIngredient",
        "importPath": "items.crafting.crafting_ingredient",
        "description": "items.crafting.crafting_ingredient",
        "isExtraImport": true,
        "detail": "items.crafting.crafting_ingredient",
        "documentation": {}
    },
    {
        "label": "CraftingIngredient",
        "importPath": "items.crafting.crafting_ingredient",
        "description": "items.crafting.crafting_ingredient",
        "isExtraImport": true,
        "detail": "items.crafting.crafting_ingredient",
        "documentation": {}
    },
    {
        "label": "grid2x2",
        "importPath": "items.crafting.grid_types",
        "description": "items.crafting.grid_types",
        "isExtraImport": true,
        "detail": "items.crafting.grid_types",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Hitty",
        "importPath": "player.hitbox",
        "description": "player.hitbox",
        "isExtraImport": true,
        "detail": "player.hitbox",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "serial",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial",
        "description": "serial",
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "Classifier",
        "importPath": "environment.classifier",
        "description": "environment.classifier",
        "isExtraImport": true,
        "detail": "environment.classifier",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "environment.generator",
        "description": "environment.generator",
        "isExtraImport": true,
        "detail": "environment.generator",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player.player",
        "description": "player.player",
        "isExtraImport": true,
        "detail": "player.player",
        "documentation": {}
    },
    {
        "label": "universal_inventory_gui",
        "importPath": "inventory",
        "description": "inventory",
        "isExtraImport": true,
        "detail": "inventory",
        "documentation": {}
    },
    {
        "label": "inventory_gui",
        "importPath": "inventory",
        "description": "inventory",
        "isExtraImport": true,
        "detail": "inventory",
        "documentation": {}
    },
    {
        "label": "GuiGroup",
        "importPath": "gui.gui_module.gui_holder",
        "description": "gui.gui_module.gui_holder",
        "isExtraImport": true,
        "detail": "gui.gui_module.gui_holder",
        "documentation": {}
    },
    {
        "label": "gui",
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "isExtraImport": true,
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "serial,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial.",
        "description": "serial.",
        "detail": "serial.",
        "documentation": {}
    },
    {
        "label": "keyboard,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard.",
        "description": "keyboard.",
        "detail": "keyboard.",
        "documentation": {}
    },
    {
        "label": "IBlock",
        "kind": 6,
        "importPath": "blocks.block",
        "description": "blocks.block",
        "peekOfCode": "class IBlock(pygame.sprite.Sprite):\n    def __init__(self, position, image, durability) -> None:\n        super().__init__()\n        self.or_image:pygame.Surface = image\n        self.image:pygame.Surface = image\n        self.rect = self.image.get_rect()\n        self.rect.topleft = position\n        # how long to break block in ticks\n        self.dur = durability\n        self.tiki = 0",
        "detail": "blocks.block",
        "documentation": {}
    },
    {
        "label": "CraftingTable_block",
        "kind": 6,
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "peekOfCode": "class CraftingTable_block(IBlock):\n    def __init__(self, pos, breaked_group) -> None:\n        self.img = rm.get_crafting_table((50,50))\n        self.breaked = breaked_group\n        # fps * 3\n        super().__init__(pos,self.img, FPS*2)\n    def on_right_click(self,):\n        # open gui\n        pass\n    def on_break(self):",
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "MiniCraftingTable",
        "kind": 6,
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "peekOfCode": "class MiniCraftingTable(IIMiniItem):\n    def __init__(self,cords) -> None:\n        self.parent = CraftingTable\n        self.image = rm.get_crafting_table((16,16))\n        super().__init__(cords, self.image, self.parent)\nclass CraftingTable(IItem):\n    def __init__(self, parent_slot) -> None:\n        super().__init__()\n        self.parent = parent_slot\n        self.is_block = True",
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "CraftingTable",
        "kind": 6,
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "peekOfCode": "class CraftingTable(IItem):\n    def __init__(self, parent_slot) -> None:\n        super().__init__()\n        self.parent = parent_slot\n        self.is_block = True\n        self.blocky_image = rm.get_crafting_table((50,50))\n        self.minimized_for_inv = rm.get_crafting_table((32,32))\n        self.player = None\n        self.mini = MiniCraftingTable\n        self.title = \"Crafting Table\"",
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "rm",
        "kind": 5,
        "importPath": "blocks.crafting_table",
        "description": "blocks.crafting_table",
        "peekOfCode": "rm = ResourceManager()\nclass CraftingTable_block(IBlock):\n    def __init__(self, pos, breaked_group) -> None:\n        self.img = rm.get_crafting_table((50,50))\n        self.breaked = breaked_group\n        # fps * 3\n        super().__init__(pos,self.img, FPS*2)\n    def on_right_click(self,):\n        # open gui\n        pass",
        "detail": "blocks.crafting_table",
        "documentation": {}
    },
    {
        "label": "Classifier",
        "kind": 6,
        "importPath": "environment.classifier",
        "description": "environment.classifier",
        "peekOfCode": "class Classifier:\n    def __init__(self, top_l, top_r, btm_l, btm_r, cent, cent_l, cent_r, cent_t):\n        self.top_left = top_l\n        self.top_right = top_r\n        self.bottom_left = btm_l\n        self.bottom_right = btm_r\n        self.center = cent\n        self.center_left = cent_l\n        self.center_right = cent_r\n        self.center_top = cent_t",
        "detail": "environment.classifier",
        "documentation": {}
    },
    {
        "label": "Generator",
        "kind": 6,
        "importPath": "environment.generator",
        "description": "environment.generator",
        "peekOfCode": "class Generator:\n    def __init__(self, player, wall_0) -> None:\n        self.wall_0 = wall_0\n        self.last_wall = wall_0\n        self.player = player\n        self.count = 1\n        self.hardness = 0\n        self.color_n = 1\n    def generate(self,walls,colliders):\n        y = self.wall_0.rect.y",
        "detail": "environment.generator",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "gui.gui_module.button",
        "description": "gui.gui_module.button",
        "peekOfCode": "class Button(Element):\n    def __init__(self,color, borders, size, center: tuple, boh,custom_borders = None, stroke_color=None, stroke_w=None) -> None:\n        srf = pygame.Surface(size,pygame.SRCALPHA)\n        self.borders = borders\n        self.custom_borders = custom_borders\n        self.size = size\n        self.stroke_color = stroke_color\n        self.stroke_w = stroke_w\n        # top_l = Utilz.convert_center_to_top_left(center[0], center[1], size[0], size[1])\n        if custom_borders != None:",
        "detail": "gui.gui_module.button",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "gui.gui_module.element",
        "description": "gui.gui_module.element",
        "peekOfCode": "class Element:\n    def __init__(self,srf, coordinates:tuple,boh) -> None:\n        # do studff\n        self.surface:pygame.Surface = srf\n        self.surface.convert_alpha()\n        self.or_surf = self.surface.copy()\n        self.coordinates = Coordinates(coordinates[0], coordinates[1])\n        self.base_y = self.coordinates.y\n        self.hover = False\n        self.hovering_animation_active = False",
        "detail": "gui.gui_module.element",
        "documentation": {}
    },
    {
        "label": "HOVER",
        "kind": 6,
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "peekOfCode": "class HOVER:\n    def __init__(self,hld = []) -> None:\n        self.evt_type = HOVER\n        self.hold = hld\n    def call(self):\n        for holdi in self.hold:\n            holdi()\nclass RIGHT_CLICK:\n    def __init__(self,hld = []) -> None:\n        self.evt_type =RIGHT_CLICK",
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "RIGHT_CLICK",
        "kind": 6,
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "peekOfCode": "class RIGHT_CLICK:\n    def __init__(self,hld = []) -> None:\n        self.evt_type =RIGHT_CLICK\n        self.hold = hld\n    def call(self):\n        for holdi in self.hold:\n            holdi()\nclass LEFT_CLICK:\n    def __init__(self,hld = []) -> None:\n        self.evt_type =LEFT_CLICK",
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "LEFT_CLICK",
        "kind": 6,
        "importPath": "gui.gui_module.event_types",
        "description": "gui.gui_module.event_types",
        "peekOfCode": "class LEFT_CLICK:\n    def __init__(self,hld = []) -> None:\n        self.evt_type =LEFT_CLICK\n        self.hold = hld\n    def call(self):\n        for holdi in self.hold:\n            holdi()",
        "detail": "gui.gui_module.event_types",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "gui.gui_module.frame",
        "description": "gui.gui_module.frame",
        "peekOfCode": "class Frame(Element):\n    def __init__(self,color, borders, size, center: tuple, boh,sep_borders = None) -> None:\n        srf = pygame.Surface(size,pygame.SRCALPHA)\n        # top_l = Utilz.convert_center_to_top_left(center[0], center[1], size[0], size[1])\n        if sep_borders == None:\n            pygame.draw.rect(srf, color, pygame.Rect((0,0), size),0,borders)\n        else:\n            pygame.draw.rect(srf, color, pygame.Rect((0,0), size),0,border_top_left_radius=sep_borders[0], border_top_right_radius=sep_borders[1], border_bottom_left_radius=sep_borders[2], border_bottom_right_radius=sep_borders[3])\n        super().__init__(srf, center, boh)",
        "detail": "gui.gui_module.frame",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "gui.gui_module.gui",
        "description": "gui.gui_module.gui",
        "peekOfCode": "class Gui: \n    def __init__(self, active=False) -> None:\n        # Requirements: set visible/invisible, is reacting to events, open, close, draw (calls element's draw), events, global hover & click events\n        self.is_visible = active\n        self.is_reacting = active\n        self.elements = []\n        self.global_events = [HOVER([]),RIGHT_CLICK([]),LEFT_CLICK([])]\n        self.transparency = 0\n        self.transparency_anim_progress = 0\n        self.tp_anim_active = False",
        "detail": "gui.gui_module.gui",
        "documentation": {}
    },
    {
        "label": "GuiGroup",
        "kind": 6,
        "importPath": "gui.gui_module.gui_holder",
        "description": "gui.gui_module.gui_holder",
        "peekOfCode": "class GuiGroup:\n    def __init__(self) -> None:\n        self.guis = []\n    def update(self,gui_coordinates, splt_val, *args):\n        for gei in self.guis:\n            gei[0].tick(gui_coordinates, splt_val)\n            if gei[1] != None:\n                gei[1](gui_coordinates, splt_val,*args)\n    def draw(self, screen):\n        for gei in self.guis:",
        "detail": "gui.gui_module.gui_holder",
        "documentation": {}
    },
    {
        "label": "GUIslot",
        "kind": 6,
        "importPath": "gui.gui_module.gui_slot",
        "description": "gui.gui_module.gui_slot",
        "peekOfCode": "class GUIslot(Button,):\n    def __init__(self,size,color, borders, center,boh,crs, parent:Slot=None,custom_borders = None,stroke_w=None, stroke_color=None) -> None:\n        self.parent_slot = parent\n        self.size = size \n        # self.coords = center\n        self.crs_obj = crs\n        self.last_remembered_item = \"\"\n        super().__init__(color, borders,size,center,boh,custom_borders,stroke_color, stroke_w)\n        self.mover_time = int(FPS/2)\n        self.ore_surf = self.or_surf.copy()",
        "detail": "gui.gui_module.gui_slot",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "gui.gui_module.image",
        "description": "gui.gui_module.image",
        "peekOfCode": "class Image(Element):\n    def __init__(self,image, center,sync,  boh) -> None:\n        self.coordz = center\n        self.syncer = sync\n        super().__init__(image, center.to_tuple(), boh)\n    def sync(self):\n        if self.syncer:\n            self.coordinates = self.coordz",
        "detail": "gui.gui_module.image",
        "documentation": {}
    },
    {
        "label": "IRS",
        "kind": 6,
        "importPath": "gui.gui_module.irs",
        "description": "gui.gui_module.irs",
        "peekOfCode": "class IRS:\n    # crs obj should have item, count, and closed to close\n    def __init__(self) -> None:\n        self.item = None\n        self.count = 0\n    def draw(self, screen, gui_coordinates):\n        # print(f\"item is {self.item}\")\n        # print(self.count,self.item)\n        screen.blit(scope, tuple(gui_coordinates))\n        if self.item != None:",
        "detail": "gui.gui_module.irs",
        "documentation": {}
    },
    {
        "label": "scope",
        "kind": 5,
        "importPath": "gui.gui_module.irs",
        "description": "gui.gui_module.irs",
        "peekOfCode": "scope = resource_manager.get_scope()\nclass IRS:\n    # crs obj should have item, count, and closed to close\n    def __init__(self) -> None:\n        self.item = None\n        self.count = 0\n    def draw(self, screen, gui_coordinates):\n        # print(f\"item is {self.item}\")\n        # print(self.count,self.item)\n        screen.blit(scope, tuple(gui_coordinates))",
        "detail": "gui.gui_module.irs",
        "documentation": {}
    },
    {
        "label": "o_irs",
        "kind": 5,
        "importPath": "gui.gui_module.irs",
        "description": "gui.gui_module.irs",
        "peekOfCode": "o_irs = IRS()",
        "detail": "gui.gui_module.irs",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "gui.gui_module.label",
        "description": "gui.gui_module.label",
        "peekOfCode": "class Label(Element):\n    def __init__(self, text, color, font_size, font: Literal[\"Brownie\", \"Freedom\"], coordinates: tuple, boh,offset = None,parent_to_offset_from = None) -> None:\n        if font == \"Brownie\":\n            self.font = resource_manager.get_brownie_s(font_size)\n        elif font == \"Freedom\":\n            self.font = resource_manager.get_freedom(font_size)\n        self.text = text \n        self.color = color \n        self.offset = offset\n        self.parent_offset =parent_to_offset_from",
        "detail": "gui.gui_module.label",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "kind": 6,
        "importPath": "inventory.inventory",
        "description": "inventory.inventory",
        "peekOfCode": "class Inventory:\n    def __init__(self) -> None:\n        self.SLOT_NUMBER = 9\n        self.INV_NUMBER = 27\n        self.hotbar = [\n            Slot(None, True),\n            *[Slot(None) for i in range(self.SLOT_NUMBER - 1)],\n        ]\n        self.inventory = [Slot(None) for i in range(self.INV_NUMBER +0)]\n        self.shield = Slot(None, False)",
        "detail": "inventory.inventory",
        "documentation": {}
    },
    {
        "label": "inventory",
        "kind": 5,
        "importPath": "inventory.inventory",
        "description": "inventory.inventory",
        "peekOfCode": "inventory = Inventory()",
        "detail": "inventory.inventory",
        "documentation": {}
    },
    {
        "label": "reactivate_wardrobe",
        "kind": 2,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "def reactivate_wardrobe():\n    if wardrobe.is_visible:\n        # disable \n        wardrobe.left_to_right_slide_anim(wardrobe.close,True)\n        wardrobe.left_to_right_slide_anim_progress = WIDTH/2\n        print(wardrobe.left_to_right_slide_anim_progress, type(wardrobe.left_to_right_slide_anim_progress))\n        wardrobe.update_xs((WIDTH/2))\n        wardrobe.transparency_anim()\n    else:\n        wardrobe.open()",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "tick",
        "kind": 2,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "def tick(gui_coordinates, splt_val, *args):\n    shield_slot.sync(gui_coordinates, splt_val)\n    dress_img.sync()\n    arch_img.sync()\n    shield_img.sync()\n    crafting_arrow.sync()\n    for crafting_slot in crafting_slots:\n        crafting_slot.sync(gui_coordinates, splt_val)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "gui = Gui(False)\nframe1 = Frame(\n    FIRST_INV_COLOR,\n    0,\n    (800, 235),\n    (WIDTH / 2, HEIGHT / 2 -117- 150),\n    False,\n    (16, 16, 0, 0),\n)\nframe1.pack(gui, 0)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "frame1",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "frame1 = Frame(\n    FIRST_INV_COLOR,\n    0,\n    (800, 235),\n    (WIDTH / 2, HEIGHT / 2 -117- 150),\n    False,\n    (16, 16, 0, 0),\n)\nframe1.pack(gui, 0)\ninventory_label = Label(\"Inventory\", WHITE, 32, \"Brownie\", (200, 40),False)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "inventory_label",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "inventory_label = Label(\"Inventory\", WHITE, 32, \"Brownie\", (200, 40),False)\ninventory_label.pack(gui, 1)\nframe2 = Frame(THIRD_INV_COLOR, 15, (798, 15), (WIDTH / 2, 250), False)\nframe2.pack(gui, -1)\nframe3  = Frame(WHITE, 15, (264, 178), (255, 150), False)\nframe3.pack(gui, -1)\nshield_slot = GUIslot((60,60), FOURTH_INV_COLOR, 16, (440, 200), False, o_irs, inventory.shield)\nshield_slot.pack(gui, -1) \narch_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 40), True)\narch_button.pack(gui, -1)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "frame2",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "frame2 = Frame(THIRD_INV_COLOR, 15, (798, 15), (WIDTH / 2, 250), False)\nframe2.pack(gui, -1)\nframe3  = Frame(WHITE, 15, (264, 178), (255, 150), False)\nframe3.pack(gui, -1)\nshield_slot = GUIslot((60,60), FOURTH_INV_COLOR, 16, (440, 200), False, o_irs, inventory.shield)\nshield_slot.pack(gui, -1) \narch_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 40), True)\narch_button.pack(gui, -1)\nshield_img = Image(resource_manager.get_shield(), shield_slot.coordinates,True,False)\nshield_img.pack(gui, -1)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "shield_slot",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "shield_slot = GUIslot((60,60), FOURTH_INV_COLOR, 16, (440, 200), False, o_irs, inventory.shield)\nshield_slot.pack(gui, -1) \narch_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 40), True)\narch_button.pack(gui, -1)\nshield_img = Image(resource_manager.get_shield(), shield_slot.coordinates,True,False)\nshield_img.pack(gui, -1)\narch_img = Image(resource_manager.get_achievement(), arch_button.coordinates,True,False)\narch_img.pack(gui, -1)\ndress_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 120), True)\ndress_button.pack(gui, -1)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "arch_button",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "arch_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 40), True)\narch_button.pack(gui, -1)\nshield_img = Image(resource_manager.get_shield(), shield_slot.coordinates,True,False)\nshield_img.pack(gui, -1)\narch_img = Image(resource_manager.get_achievement(), arch_button.coordinates,True,False)\narch_img.pack(gui, -1)\ndress_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 120), True)\ndress_button.pack(gui, -1)\ndress_img = Image(resource_manager.get_hanger(), dress_button.coordinates,True, False)\ndress_img.pack(gui, -1)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "shield_img",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "shield_img = Image(resource_manager.get_shield(), shield_slot.coordinates,True,False)\nshield_img.pack(gui, -1)\narch_img = Image(resource_manager.get_achievement(), arch_button.coordinates,True,False)\narch_img.pack(gui, -1)\ndress_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 120), True)\ndress_button.pack(gui, -1)\ndress_img = Image(resource_manager.get_hanger(), dress_button.coordinates,True, False)\ndress_img.pack(gui, -1)\nprint(id(dress_img), id(dress_button))\ncrafting_label = Label(\"Crafting\", WHITE, 32, \"Brownie\", (580, 40),False)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "arch_img",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "arch_img = Image(resource_manager.get_achievement(), arch_button.coordinates,True,False)\narch_img.pack(gui, -1)\ndress_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 120), True)\ndress_button.pack(gui, -1)\ndress_img = Image(resource_manager.get_hanger(), dress_button.coordinates,True, False)\ndress_img.pack(gui, -1)\nprint(id(dress_img), id(dress_button))\ncrafting_label = Label(\"Crafting\", WHITE, 32, \"Brownie\", (580, 40),False)\ncrafting_label.pack(gui, -1)\ncrafting_slot1 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 110), False, o_irs, inventory.crafting_grid[0], (16,0,0,0), 3, BLACK)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "dress_button",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "dress_button = Button(FOURTH_INV_COLOR, 16, (60,60) ,(440, 120), True)\ndress_button.pack(gui, -1)\ndress_img = Image(resource_manager.get_hanger(), dress_button.coordinates,True, False)\ndress_img.pack(gui, -1)\nprint(id(dress_img), id(dress_button))\ncrafting_label = Label(\"Crafting\", WHITE, 32, \"Brownie\", (580, 40),False)\ncrafting_label.pack(gui, -1)\ncrafting_slot1 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 110), False, o_irs, inventory.crafting_grid[0], (16,0,0,0), 3, BLACK)\ncrafting_slot1.pack(gui, -1)\ncrafting_slot2 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 110), False, o_irs, inventory.crafting_grid[1], (0,16,0,0), 3, BLACK)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "dress_img",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "dress_img = Image(resource_manager.get_hanger(), dress_button.coordinates,True, False)\ndress_img.pack(gui, -1)\nprint(id(dress_img), id(dress_button))\ncrafting_label = Label(\"Crafting\", WHITE, 32, \"Brownie\", (580, 40),False)\ncrafting_label.pack(gui, -1)\ncrafting_slot1 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 110), False, o_irs, inventory.crafting_grid[0], (16,0,0,0), 3, BLACK)\ncrafting_slot1.pack(gui, -1)\ncrafting_slot2 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 110), False, o_irs, inventory.crafting_grid[1], (0,16,0,0), 3, BLACK)\ncrafting_slot2.pack(gui, -1)\ncrafting_slot3 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 198 ), False, o_irs, inventory.crafting_grid[2], (0,0,16,0), 3, BLACK)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_label",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_label = Label(\"Crafting\", WHITE, 32, \"Brownie\", (580, 40),False)\ncrafting_label.pack(gui, -1)\ncrafting_slot1 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 110), False, o_irs, inventory.crafting_grid[0], (16,0,0,0), 3, BLACK)\ncrafting_slot1.pack(gui, -1)\ncrafting_slot2 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 110), False, o_irs, inventory.crafting_grid[1], (0,16,0,0), 3, BLACK)\ncrafting_slot2.pack(gui, -1)\ncrafting_slot3 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 198 ), False, o_irs, inventory.crafting_grid[2], (0,0,16,0), 3, BLACK)\ncrafting_slot3.pack(gui, -1)\ncrafting_slot4 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 198), False, o_irs, inventory.crafting_grid[3], (0,0,0,16), 3, BLACK)\ncrafting_slot4.pack(gui, -1)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_slot1",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_slot1 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 110), False, o_irs, inventory.crafting_grid[0], (16,0,0,0), 3, BLACK)\ncrafting_slot1.pack(gui, -1)\ncrafting_slot2 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 110), False, o_irs, inventory.crafting_grid[1], (0,16,0,0), 3, BLACK)\ncrafting_slot2.pack(gui, -1)\ncrafting_slot3 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 198 ), False, o_irs, inventory.crafting_grid[2], (0,0,16,0), 3, BLACK)\ncrafting_slot3.pack(gui, -1)\ncrafting_slot4 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 198), False, o_irs, inventory.crafting_grid[3], (0,0,0,16), 3, BLACK)\ncrafting_slot4.pack(gui, -1)\ncrafting_slots = [crafting_slot1, crafting_slot2, crafting_slot3, crafting_slot4]\ncrafting_arrow = Image(resource_manager.get_arrow_right(), Coordinates(735, 154), False, False)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_slot2",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_slot2 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 110), False, o_irs, inventory.crafting_grid[1], (0,16,0,0), 3, BLACK)\ncrafting_slot2.pack(gui, -1)\ncrafting_slot3 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 198 ), False, o_irs, inventory.crafting_grid[2], (0,0,16,0), 3, BLACK)\ncrafting_slot3.pack(gui, -1)\ncrafting_slot4 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 198), False, o_irs, inventory.crafting_grid[3], (0,0,0,16), 3, BLACK)\ncrafting_slot4.pack(gui, -1)\ncrafting_slots = [crafting_slot1, crafting_slot2, crafting_slot3, crafting_slot4]\ncrafting_arrow = Image(resource_manager.get_arrow_right(), Coordinates(735, 154), False, False)\ncrafting_arrow.pack(gui, -1)\ncrafting_result = GUIslot((88,88), FIFTH_INV_COLOR, 16, (830, 154), False, o_irs, inventory.crafting_grid[4],None, 3, BLACK )",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_slot3",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_slot3 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (560, 198 ), False, o_irs, inventory.crafting_grid[2], (0,0,16,0), 3, BLACK)\ncrafting_slot3.pack(gui, -1)\ncrafting_slot4 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 198), False, o_irs, inventory.crafting_grid[3], (0,0,0,16), 3, BLACK)\ncrafting_slot4.pack(gui, -1)\ncrafting_slots = [crafting_slot1, crafting_slot2, crafting_slot3, crafting_slot4]\ncrafting_arrow = Image(resource_manager.get_arrow_right(), Coordinates(735, 154), False, False)\ncrafting_arrow.pack(gui, -1)\ncrafting_result = GUIslot((88,88), FIFTH_INV_COLOR, 16, (830, 154), False, o_irs, inventory.crafting_grid[4],None, 3, BLACK )\ncrafting_result.pack(gui, -1)\ncrafting_slots.append(crafting_result)",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_slot4",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_slot4 = GUIslot((88,88), FIFTH_INV_COLOR, 0, (646, 198), False, o_irs, inventory.crafting_grid[3], (0,0,0,16), 3, BLACK)\ncrafting_slot4.pack(gui, -1)\ncrafting_slots = [crafting_slot1, crafting_slot2, crafting_slot3, crafting_slot4]\ncrafting_arrow = Image(resource_manager.get_arrow_right(), Coordinates(735, 154), False, False)\ncrafting_arrow.pack(gui, -1)\ncrafting_result = GUIslot((88,88), FIFTH_INV_COLOR, 16, (830, 154), False, o_irs, inventory.crafting_grid[4],None, 3, BLACK )\ncrafting_result.pack(gui, -1)\ncrafting_slots.append(crafting_result)\nwardrobe = Gui(False)\nwardrobe_frame = Frame(SIXTH_INV_COLOR, 0, (90, 578), (81,HEIGHT/2), False,(16,0,16,0))",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_slots",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_slots = [crafting_slot1, crafting_slot2, crafting_slot3, crafting_slot4]\ncrafting_arrow = Image(resource_manager.get_arrow_right(), Coordinates(735, 154), False, False)\ncrafting_arrow.pack(gui, -1)\ncrafting_result = GUIslot((88,88), FIFTH_INV_COLOR, 16, (830, 154), False, o_irs, inventory.crafting_grid[4],None, 3, BLACK )\ncrafting_result.pack(gui, -1)\ncrafting_slots.append(crafting_result)\nwardrobe = Gui(False)\nwardrobe_frame = Frame(SIXTH_INV_COLOR, 0, (90, 578), (81,HEIGHT/2), False,(16,0,16,0))\nwardrobe_frame.pack(wardrobe, 0)\nbase_y = 200",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_arrow",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_arrow = Image(resource_manager.get_arrow_right(), Coordinates(735, 154), False, False)\ncrafting_arrow.pack(gui, -1)\ncrafting_result = GUIslot((88,88), FIFTH_INV_COLOR, 16, (830, 154), False, o_irs, inventory.crafting_grid[4],None, 3, BLACK )\ncrafting_result.pack(gui, -1)\ncrafting_slots.append(crafting_result)\nwardrobe = Gui(False)\nwardrobe_frame = Frame(SIXTH_INV_COLOR, 0, (90, 578), (81,HEIGHT/2), False,(16,0,16,0))\nwardrobe_frame.pack(wardrobe, 0)\nbase_y = 200\nwardrobe_lst = []",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "crafting_result",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "crafting_result = GUIslot((88,88), FIFTH_INV_COLOR, 16, (830, 154), False, o_irs, inventory.crafting_grid[4],None, 3, BLACK )\ncrafting_result.pack(gui, -1)\ncrafting_slots.append(crafting_result)\nwardrobe = Gui(False)\nwardrobe_frame = Frame(SIXTH_INV_COLOR, 0, (90, 578), (81,HEIGHT/2), False,(16,0,16,0))\nwardrobe_frame.pack(wardrobe, 0)\nbase_y = 200\nwardrobe_lst = []\ndef reactivate_wardrobe():\n    if wardrobe.is_visible:",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "wardrobe",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "wardrobe = Gui(False)\nwardrobe_frame = Frame(SIXTH_INV_COLOR, 0, (90, 578), (81,HEIGHT/2), False,(16,0,16,0))\nwardrobe_frame.pack(wardrobe, 0)\nbase_y = 200\nwardrobe_lst = []\ndef reactivate_wardrobe():\n    if wardrobe.is_visible:\n        # disable \n        wardrobe.left_to_right_slide_anim(wardrobe.close,True)\n        wardrobe.left_to_right_slide_anim_progress = WIDTH/2",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "wardrobe_frame",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "wardrobe_frame = Frame(SIXTH_INV_COLOR, 0, (90, 578), (81,HEIGHT/2), False,(16,0,16,0))\nwardrobe_frame.pack(wardrobe, 0)\nbase_y = 200\nwardrobe_lst = []\ndef reactivate_wardrobe():\n    if wardrobe.is_visible:\n        # disable \n        wardrobe.left_to_right_slide_anim(wardrobe.close,True)\n        wardrobe.left_to_right_slide_anim_progress = WIDTH/2\n        print(wardrobe.left_to_right_slide_anim_progress, type(wardrobe.left_to_right_slide_anim_progress))",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "base_y",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "base_y = 200\nwardrobe_lst = []\ndef reactivate_wardrobe():\n    if wardrobe.is_visible:\n        # disable \n        wardrobe.left_to_right_slide_anim(wardrobe.close,True)\n        wardrobe.left_to_right_slide_anim_progress = WIDTH/2\n        print(wardrobe.left_to_right_slide_anim_progress, type(wardrobe.left_to_right_slide_anim_progress))\n        wardrobe.update_xs((WIDTH/2))\n        wardrobe.transparency_anim()",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "wardrobe_lst",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "wardrobe_lst = []\ndef reactivate_wardrobe():\n    if wardrobe.is_visible:\n        # disable \n        wardrobe.left_to_right_slide_anim(wardrobe.close,True)\n        wardrobe.left_to_right_slide_anim_progress = WIDTH/2\n        print(wardrobe.left_to_right_slide_anim_progress, type(wardrobe.left_to_right_slide_anim_progress))\n        wardrobe.update_xs((WIDTH/2))\n        wardrobe.transparency_anim()\n    else:",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "dress_button.on_left_click",
        "kind": 5,
        "importPath": "inventory.inventory_gui",
        "description": "inventory.inventory_gui",
        "peekOfCode": "dress_button.on_left_click = reactivate_wardrobe\n# dress_img.on_left_click = reactivate_wardrobe\ngui.subscribe(dress_button, LEFT_CLICK)\ndef tick(gui_coordinates, splt_val, *args):\n    shield_slot.sync(gui_coordinates, splt_val)\n    dress_img.sync()\n    arch_img.sync()\n    shield_img.sync()\n    crafting_arrow.sync()\n    for crafting_slot in crafting_slots:",
        "detail": "inventory.inventory_gui",
        "documentation": {}
    },
    {
        "label": "Slot",
        "kind": 6,
        "importPath": "inventory.slot",
        "description": "inventory.slot",
        "peekOfCode": "class Slot:\n    def __init__(self, item, act=False) -> None:\n        self.item = item\n        self.image_act = rm.get_active_slot().copy()\n        self.image_unact = rm.get_unactive_slot().copy()\n        self.og_image_act = rm.get_active_slot().copy()\n        self.og_image_unact = rm.get_unactive_slot().copy()\n        self.is_active = act\n        self.count = 0\n        if item is not None:",
        "detail": "inventory.slot",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "def a(i):\n    return 3 if i >= 1 else 0\nnew_slot.pack(gui, -1)\nslotovii_inventar.append(new_slot)\nfor i in range(0, 9, 1):\n    new_slot = GUIslot(\n        (ONE_SIZE, 88),\n        SECOND_INV_COLOR,\n        0,\n        (((i) * 88) + (51 + ONE_SIZE) + a(i), BASE_INV_Y + ONE_SIZE - 10),",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "tick",
        "kind": 2,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "def tick(gui_coordinates, splt_val, *args):\n    global delay, is_button_left\n    player = args[0]\n    delay -= 1\n    for slt in slotovii_hotbar:\n        slt.sync(gui_coordinates, splt_val)\n    for slt in slotovii_inventar:\n        slt.sync(gui_coordinates, splt_val)\n    if splt_val[-1] == \"1\":\n        is_button_left = True",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "BASE_INV_Y",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "BASE_INV_Y = 320\ngui = Gui(False)\nframe1 = Frame(\n    FIRST_INV_COLOR,\n    0,\n    (800, 434),\n    (WIDTH / 2, HEIGHT / 2 - 150 + 217),\n    False,\n    (0, 0, 16, 16),\n)",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "gui = Gui(False)\nframe1 = Frame(\n    FIRST_INV_COLOR,\n    0,\n    (800, 434),\n    (WIDTH / 2, HEIGHT / 2 - 150 + 217),\n    False,\n    (0, 0, 16, 16),\n)\nframe1.pack(gui, 0)",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "frame1",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "frame1 = Frame(\n    FIRST_INV_COLOR,\n    0,\n    (800, 434),\n    (WIDTH / 2, HEIGHT / 2 - 150 + 217),\n    False,\n    (0, 0, 16, 16),\n)\nframe1.pack(gui, 0)\nslotovii_hotbar = []",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "slotovii_hotbar",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "slotovii_hotbar = []\nx = 154\nfor i in range(9):\n    new_slotiks = GUIslot(\n        (65, 65), SECOND_INV_COLOR, 0, (x, 633), False, o_irs, inventory.hotbar[i]\n    )\n    new_slotiks.pack(gui, 1)\n    slotovii_hotbar.append(new_slotiks)\n    x += 87\nframe2 = Frame(THIRD_INV_COLOR, 15, (798, 15), (WIDTH / 2, 561), False)",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "x = 154\nfor i in range(9):\n    new_slotiks = GUIslot(\n        (65, 65), SECOND_INV_COLOR, 0, (x, 633), False, o_irs, inventory.hotbar[i]\n    )\n    new_slotiks.pack(gui, 1)\n    slotovii_hotbar.append(new_slotiks)\n    x += 87\nframe2 = Frame(THIRD_INV_COLOR, 15, (798, 15), (WIDTH / 2, 561), False)\nframe2.pack(gui, -1)",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "frame2",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "frame2 = Frame(THIRD_INV_COLOR, 15, (798, 15), (WIDTH / 2, 561), False)\nframe2.pack(gui, -1)\nONE_SIZE = 95\nslotovii_inventar = [\n    GUIslot(\n        (ONE_SIZE, 88),\n        SECOND_INV_COLOR,\n        0,\n        (146, BASE_INV_Y),\n        False,",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "ONE_SIZE",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "ONE_SIZE = 95\nslotovii_inventar = [\n    GUIslot(\n        (ONE_SIZE, 88),\n        SECOND_INV_COLOR,\n        0,\n        (146, BASE_INV_Y),\n        False,\n        o_irs,\n        inventory.inventory[0],",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "slotovii_inventar",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "slotovii_inventar = [\n    GUIslot(\n        (ONE_SIZE, 88),\n        SECOND_INV_COLOR,\n        0,\n        (146, BASE_INV_Y),\n        False,\n        o_irs,\n        inventory.inventory[0],\n        (16, 0, 0, 0),",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "new_slot",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "new_slot = GUIslot(\n    (ONE_SIZE, 88),\n    SECOND_INV_COLOR,\n    0,\n    (WIDTH - 146, BASE_INV_Y),\n    False,\n    o_irs,\n    inventory.inventory[8],\n    (0, 16, 0, 0),\n    4,",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "new_slot",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "new_slot = GUIslot(\n    (ONE_SIZE, 88),\n    SECOND_INV_COLOR,\n    0,\n    (146, BASE_INV_Y+ONE_SIZE*2-20),\n    False,\n    o_irs,\n    inventory.inventory[18],\n    (0, 0,16, 0),\n    4,",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "new_slot",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "new_slot = GUIslot(\n    (ONE_SIZE, 88),\n    SECOND_INV_COLOR,\n    0,\n    (WIDTH - 146, BASE_INV_Y+ONE_SIZE*2-20),\n    False,\n    o_irs,\n    inventory.inventory[8+18],\n    (0, 0, 0, 16),\n    4,",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "delay = 0\nis_button_left = True\nis_leaving = False\ndef tick(gui_coordinates, splt_val, *args):\n    global delay, is_button_left\n    player = args[0]\n    delay -= 1\n    for slt in slotovii_hotbar:\n        slt.sync(gui_coordinates, splt_val)\n    for slt in slotovii_inventar:",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "is_button_left",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "is_button_left = True\nis_leaving = False\ndef tick(gui_coordinates, splt_val, *args):\n    global delay, is_button_left\n    player = args[0]\n    delay -= 1\n    for slt in slotovii_hotbar:\n        slt.sync(gui_coordinates, splt_val)\n    for slt in slotovii_inventar:\n        slt.sync(gui_coordinates, splt_val)",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "is_leaving",
        "kind": 5,
        "importPath": "inventory.universal_inventory_gui",
        "description": "inventory.universal_inventory_gui",
        "peekOfCode": "is_leaving = False\ndef tick(gui_coordinates, splt_val, *args):\n    global delay, is_button_left\n    player = args[0]\n    delay -= 1\n    for slt in slotovii_hotbar:\n        slt.sync(gui_coordinates, splt_val)\n    for slt in slotovii_inventar:\n        slt.sync(gui_coordinates, splt_val)\n    if splt_val[-1] == \"1\":",
        "detail": "inventory.universal_inventory_gui",
        "documentation": {}
    },
    {
        "label": "CraftingIngredient",
        "kind": 6,
        "importPath": "items.crafting.crafting_ingredient",
        "description": "items.crafting.crafting_ingredient",
        "peekOfCode": "class CraftingIngredient:\n    def __init__(self,i, c):\n        self.item = i \n        self.count = c \n    item = None\n    count = None\n    def __eq__(self, __value: object) -> bool:\n        return __value.item == self.item and __value.count >= self.count \n    def __floordiv__(self, __value:object) -> int: \n        return self.count//__value.count",
        "detail": "items.crafting.crafting_ingredient",
        "documentation": {}
    },
    {
        "label": "IICraftingRecipe",
        "kind": 6,
        "importPath": "items.crafting.crafting_recipe",
        "description": "items.crafting.crafting_recipe",
        "peekOfCode": "class IICraftingRecipe:\n    def __init__(self, item, grid, gridtype, strictness_level) -> None:\n        self.grid_type = gridtype\n        self.grid = grid\n        self.is_strict = strictness_level == \"strict\"\n        self.is_very_strict = strictness_level == \"very_strict\"\n        self.itm = item\n    def slots_to_ingredients(self, slots, w):\n        return list(Utilz.split_list([CraftingIngredient(slot.item, slot.count) for slot in slots], w)),list(Utilz.split_list(slots, w))\n    def eval(self, slots,width) -> CraftingIngredient:",
        "detail": "items.crafting.crafting_recipe",
        "documentation": {}
    },
    {
        "label": "gridBase",
        "kind": 6,
        "importPath": "items.crafting.grid_types",
        "description": "items.crafting.grid_types",
        "peekOfCode": "class gridBase:\n    def __eq__(self, __value: object) -> bool:\n        return self.name == __value.name\n    def get_slots(self):\n        res = []\n        for i in range(self.lines ):\n            r = []\n            for j in range(self.columns):\n                r.append(CraftingIngredient(None, 1))\n            res.append(r)",
        "detail": "items.crafting.grid_types",
        "documentation": {}
    },
    {
        "label": "grid2x2",
        "kind": 6,
        "importPath": "items.crafting.grid_types",
        "description": "items.crafting.grid_types",
        "peekOfCode": "class grid2x2(gridBase):\n    name = \"2x2\"\n    lines = 2\n    columns = 2\n    slots_count = lines*columns\nclass grid3x3(gridBase):\n    name = \"3x3\"\n    lines = 3\n    columns = 3\n    slots_count = lines*columns",
        "detail": "items.crafting.grid_types",
        "documentation": {}
    },
    {
        "label": "grid3x3",
        "kind": 6,
        "importPath": "items.crafting.grid_types",
        "description": "items.crafting.grid_types",
        "peekOfCode": "class grid3x3(gridBase):\n    name = \"3x3\"\n    lines = 3\n    columns = 3\n    slots_count = lines*columns",
        "detail": "items.crafting.grid_types",
        "documentation": {}
    },
    {
        "label": "IItem",
        "kind": 6,
        "importPath": "items.item",
        "description": "items.item",
        "peekOfCode": "class IItem:\n    def __init__(self) -> None:\n        self.title = \"undefined\"\n        self.is_block = False\n        self.lore = []\n    def get_slot(self,*args,**kwargs):\n        raise Exception(\"NotImplemented error\")\n    def on_move(self,*args,**kwargs):\n        raise Exception(\"NotImplemented error\")\n    def on_right_click(self,*args,**kwargs):",
        "detail": "items.item",
        "documentation": {}
    },
    {
        "label": "IIMiniItem",
        "kind": 6,
        "importPath": "items.mini_item",
        "description": "items.mini_item",
        "peekOfCode": "class IIMiniItem(pygame.sprite.Sprite):\n    def __init__(self, cords, image, parent) -> None:\n        super().__init__()\n        self.rect = image.get_rect()\n        self.rect.center = cords\n        self.or_rect_center = list(cords)\n        self.delay = 0\n        self.parent = parent\n        self.pickup_time = 0.60\n        self.path = None",
        "detail": "items.mini_item",
        "documentation": {}
    },
    {
        "label": "RarityBase",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class RarityBase:\n    name: str\n    level: int\n    color: tuple\n    def __eq__(self, other):\n        return self.level == other.level if isinstance(other, RarityBase) else NotImplemented\n    def __lt__(self, other):\n        return self.level < other.level if isinstance(other, RarityBase) else NotImplemented\n    def __str__(self):\n        return f\"{self.name}\"",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Common",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Common(RarityBase):\n    name: str = \"Common\"\n    level: int = 0\n    color: tuple = WHITE\n@dataclass\nclass Uncommon(RarityBase):\n    name: str = \"Uncommon\"\n    level: int = 1\n    color: tuple = GREEN\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Uncommon",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Uncommon(RarityBase):\n    name: str = \"Uncommon\"\n    level: int = 1\n    color: tuple = GREEN\n@dataclass\nclass Rare(RarityBase):\n    name: str = \"Rare\"\n    level: int = 2\n    color: tuple = BLUE\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Rare",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Rare(RarityBase):\n    name: str = \"Rare\"\n    level: int = 2\n    color: tuple = BLUE\n@dataclass\nclass Epic(RarityBase):\n    name: str = \"Epic\"\n    level: int = 3\n    color: tuple = PURPLE\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Epic",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Epic(RarityBase):\n    name: str = \"Epic\"\n    level: int = 3\n    color: tuple = PURPLE\n@dataclass\nclass Legendary(RarityBase):\n    name: str = \"Legendary\"\n    level: int = 4\n    color: tuple = YELLOW\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Legendary",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Legendary(RarityBase):\n    name: str = \"Legendary\"\n    level: int = 4\n    color: tuple = YELLOW\n@dataclass\nclass Mythic(RarityBase):\n    name: str = \"Mythic\"\n    level: int = 5\n    color: tuple = ORANGE\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Mythic",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Mythic(RarityBase):\n    name: str = \"Mythic\"\n    level: int = 5\n    color: tuple = ORANGE\n@dataclass\nclass Special(RarityBase):\n    name: str = \"Special\"\n    level: int = 6\n    color: tuple = DARK_RED\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Special",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Special(RarityBase):\n    name: str = \"Special\"\n    level: int = 6\n    color: tuple = DARK_RED\n@dataclass\nclass X(RarityBase):\n    name: str = \"No one knows about it.\"\n    level: int = 7\n    color: tuple = WHITE\n@dataclass",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class X(RarityBase):\n    name: str = \"No one knows about it.\"\n    level: int = 7\n    color: tuple = WHITE\n@dataclass\nclass Rarity:\n    COMMON = Common\n    UNCOMMMON = Uncommon\n    RARE = Rare \n    EPIC = Epic ",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "Rarity",
        "kind": 6,
        "importPath": "items.rarity",
        "description": "items.rarity",
        "peekOfCode": "class Rarity:\n    COMMON = Common\n    UNCOMMMON = Uncommon\n    RARE = Rare \n    EPIC = Epic \n    LEGENDARY = Legendary\n    MYTHIC = Mythic\n    SPECIAL = Special\n    X = X",
        "detail": "items.rarity",
        "documentation": {}
    },
    {
        "label": "INTERACTION_DISTANCE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "INTERACTION_DISTANCE = 230\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nPURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nPURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "BLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nPURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nPURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "GREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nPURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "BLUE = (0, 0, 255)\nPURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "PURPLE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "PURPLE = (160, 32, 240)\nGRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GRAY",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "GRAY = (128, 128, 128)\nYELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "YELLOW = (255,255,0)\nORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "ORANGE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "ORANGE = (255, 229, 180)\nDARK_RED=  (139, 0, 0)\nFIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FIRST_INV_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "FIRST_INV_COLOR = (64,64,64)\nSECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SECOND_INV_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "SECOND_INV_COLOR = (128,128,128)\nTHIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "THIRD_INV_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "THIRD_INV_COLOR = (22,22,22)\nFOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FOURTH_INV_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "FOURTH_INV_COLOR = (96,96,96)\nFIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FIFTH_INV_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "FIFTH_INV_COLOR = (80,80,80)\nSIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SIXTH_INV_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "SIXTH_INV_COLOR = (30,30,30)\nBASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BASE_HEIGHT",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "BASE_HEIGHT = 200\nHEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT_MODIFIER",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "HEIGHT_MODIFIER = -200\nWIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "WIDTH = 1000\nHEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "HEIGHT = 800\nBASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "BASE_BLOCK_SIZE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "BASE_BLOCK_SIZE = (50,50)\nPLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "PLAYER_SIZE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "PLAYER_SIZE = (50,50)\nGUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GUI_SENSA",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "GUI_SENSA = 5\nFPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "FPS = 30\nINTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "INTERACTION_DISTANCE",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "INTERACTION_DISTANCE = 230\nTRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "TRANSPARENCY_ANIMATION_SPEED",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "TRANSPARENCY_ANIMATION_SPEED = 0.5\nSLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "SLIDE_IN_ANIMATION_SPEED",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "SLIDE_IN_ANIMATION_SPEED = 0.5\nHOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "HOVER_ANIMATION_SPEED",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "HOVER_ANIMATION_SPEED = 0.2\nlst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "lst = [(255, g, b) for g in range(0, 256, 8) for b in range(0, 256, 8)]\nfont_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "font_txt",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "font_txt = pygame.font.SysFont(\"Comic Sans MS\", 25)\nCOUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "COUNT_COLOR",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "COUNT_COLOR = (244, 230, 15)\nGUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "GUI_SLOT_COLOR_II",
        "kind": 5,
        "importPath": "other.cons",
        "description": "other.cons",
        "peekOfCode": "GUI_SLOT_COLOR_II = (30,30,30)",
        "detail": "other.cons",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "kind": 6,
        "importPath": "other.coordinates",
        "description": "other.coordinates",
        "peekOfCode": "class Coordinates:\n    def __init__(self,x,y) -> None:\n        self.x = x\n        self.y = y    \n    def to_tuple(self):\n        return (self.x, self.y)",
        "detail": "other.coordinates",
        "documentation": {}
    },
    {
        "label": "rc",
        "kind": 6,
        "importPath": "other.utils",
        "description": "other.utils",
        "peekOfCode": "class rc:\n    def __init__(self,rect) -> None:\n        self.rect = rect\nclass Holder:\n    def __init__(self, w, h, rct_size=50) -> None:\n        self.rizz = 0\n        self.grid = [[pygame.Rect(x, y, rct_size, rct_size) for x in range(0, w, rct_size)] for y in range(-10025, h, rct_size)]\n    def get_nearest(self, coordinates):\n        min_distance = float('inf')  # Start with a large distance\n        nearest_rect = None",
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Holder",
        "kind": 6,
        "importPath": "other.utils",
        "description": "other.utils",
        "peekOfCode": "class Holder:\n    def __init__(self, w, h, rct_size=50) -> None:\n        self.rizz = 0\n        self.grid = [[pygame.Rect(x, y, rct_size, rct_size) for x in range(0, w, rct_size)] for y in range(-10025, h, rct_size)]\n    def get_nearest(self, coordinates):\n        min_distance = float('inf')  # Start with a large distance\n        nearest_rect = None\n        for row in self.grid:\n            for rect in row:\n                distance = pygame.math.Vector2(coordinates) - pygame.math.Vector2(rect.topleft)",
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Utilz",
        "kind": 6,
        "importPath": "other.utils",
        "description": "other.utils",
        "peekOfCode": "class Utilz:\n    @staticmethod\n    def good_location(cords,colliders:pygame.sprite.Group,player_loc,player):\n        rect = grd.get_nearest(cords)\n        if Utilz.calc_dist_cord(rect.center, player_loc) > INTERACTION_DISTANCE or player.controls_locked:\n            return False\n        for collider in colliders.sprites():\n            if pygame.sprite.collide_rect(collider, rc(rect)):\n                return False\n        rect_2 = pygame.Rect((0,0), PLAYER_SIZE)",
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "DataClass_Transporter",
        "kind": 6,
        "importPath": "other.utils",
        "description": "other.utils",
        "peekOfCode": "class DataClass_Transporter:\n    def __init__(self,val) -> None:\n        self.val = val\n    def get_val(self):\n        return self.val\n    def set_val(self, val):\n        self.val = val",
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "grd",
        "kind": 5,
        "importPath": "other.utils",
        "description": "other.utils",
        "peekOfCode": "grd = Holder(WIDTH, HEIGHT)\nclass Utilz:\n    @staticmethod\n    def good_location(cords,colliders:pygame.sprite.Group,player_loc,player):\n        rect = grd.get_nearest(cords)\n        if Utilz.calc_dist_cord(rect.center, player_loc) > INTERACTION_DISTANCE or player.controls_locked:\n            return False\n        for collider in colliders.sprites():\n            if pygame.sprite.collide_rect(collider, rc(rect)):\n                return False",
        "detail": "other.utils",
        "documentation": {}
    },
    {
        "label": "Cub",
        "kind": 6,
        "importPath": "player.hitbox",
        "description": "player.hitbox",
        "peekOfCode": "class Cub(pygame.sprite.Sprite):\n    def __init__(self, size, ofs, hitty,colliders):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.Surface(size)\n        self.image.fill(random.choice([RED, WHITE, BLUE, GREEN]))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = Utilz.w(hitty.rect.topleft, ofs)\n        self.hitty = hitty\n        self.ofs = ofs\n        self.colliders = colliders",
        "detail": "player.hitbox",
        "documentation": {}
    },
    {
        "label": "Hitty",
        "kind": 6,
        "importPath": "player.hitbox",
        "description": "player.hitbox",
        "peekOfCode": "class Hitty(pygame.sprite.Sprite):\n    def __init__(self, colliders, size, coords, player):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.Surface(size)\n        self.image.fill(RED)\n        self.og_surf = self.image\n        self.rect = self.image.get_rect()\n        self.rect.center = coords\n        self.player = player\n        self.ii = 20",
        "detail": "player.hitbox",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "player.player",
        "description": "player.player",
        "peekOfCode": "class Player(pygame.sprite.Sprite):\n    def __init__(self, inv,colliders):\n        pygame.sprite.Sprite.__init__(self)\n        self.og_surf = rm.get_player()\n        self.image = self.og_surf\n        self.rect = self.image.get_rect()\n        self.rect.center = (\n            WIDTH / 2,\n            HEIGHT - self.rect.height + HEIGHT_MODIFIER - 15,\n        )",
        "detail": "player.player",
        "documentation": {}
    },
    {
        "label": "Wall",
        "kind": 6,
        "importPath": "player.wall",
        "description": "player.wall",
        "peekOfCode": "class Wall(pygame.sprite.Sprite):\n    def __init__(self, coords, size,player, mov=False, color=RED,topik = None,):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.Surface(size)\n        self.image.fill(color)\n        self.rect = self.image.get_rect()\n        self.rect.center = coords\n        self.player = player\n        if topik != None:\n            self.rect.top = topik",
        "detail": "player.wall",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "peekOfCode": "class ResourceManager:\n    def __init__(self, res_name = \"\") -> None:\n        self.player = pygame.image.load(\"res/images/player.png\")\n        self.player = pygame.transform.scale(self.player, PLAYER_SIZE)\n        self.slot_active = pygame.image.load(\"res/images/active.png\")\n        self.slot_active = pygame.transform.scale(self.slot_active, (70,70))\n        self.slot_unactive = pygame.image.load(\"res/images/unactive.png\")\n        self.slot_unactive = pygame.transform.scale(self.slot_unactive, (70,70))\n        # load breaking states\n        filenames = [f for f in os.listdir(\"res/images/destroy_stages\")]",
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "resource_manager",
        "kind": 5,
        "importPath": "res.resource_manager",
        "description": "res.resource_manager",
        "peekOfCode": "resource_manager = ResourceManager()",
        "detail": "res.resource_manager",
        "documentation": {}
    },
    {
        "label": "Informator",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Informator(threading.Thread):\n    def __init__(self, queue, args=(), kwargs=None):\n        threading.Thread.__init__(self, args=(), kwargs=None)\n        self.queue = queue\n        self.daemon = True\n    def run(self):\n        self.do_thing()\n    def do_thing(self):\n        while True:\n            with print_lock:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "run_calibration",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def run_calibration(splt_val, last_val):\n    global cd, ticky, calib, classi, calib_top_j_left, calib_top_j_right, calib_bottom_j_left, calib_bottom_j_right, calib_j_center, calib_center_left, calib_center_right, calib_center_top\n    if calib == 0 and last_val != \"\":\n        print(\"Hi! It's me, Calibrator. Now, we will calibrate your joystick!\")\n        calib = 1\n    elif calib == 1:\n        print(\"Press the joystick button to continue!\")\n        ticky = 1\n        calib = 3\n    elif ticky > (FPS * 3):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "scope",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "scope = rm.get_scope()\nproc = None\ntry:\n    serial = sm.Serial(\"COM6\")\nexcept Exception as e:\n    proc = subprocess.Popen([\"python\", \"simulator.py\"])\n    time.sleep(1)\n    serial = sm.Serial(\"COM9\")\nprint_lock = threading.Lock()\ninf_q = queue.Queue()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "proc = None\ntry:\n    serial = sm.Serial(\"COM6\")\nexcept Exception as e:\n    proc = subprocess.Popen([\"python\", \"simulator.py\"])\n    time.sleep(1)\n    serial = sm.Serial(\"COM9\")\nprint_lock = threading.Lock()\ninf_q = queue.Queue()\npygame.font.init()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "print_lock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "print_lock = threading.Lock()\ninf_q = queue.Queue()\npygame.font.init()\nclass Informator(threading.Thread):\n    def __init__(self, queue, args=(), kwargs=None):\n        threading.Thread.__init__(self, args=(), kwargs=None)\n        self.queue = queue\n        self.daemon = True\n    def run(self):\n        self.do_thing()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "inf_q",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "inf_q = queue.Queue()\npygame.font.init()\nclass Informator(threading.Thread):\n    def __init__(self, queue, args=(), kwargs=None):\n        threading.Thread.__init__(self, args=(), kwargs=None)\n        self.queue = queue\n        self.daemon = True\n    def run(self):\n        self.do_thing()\n    def do_thing(self):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ['SDL_VIDEO_CENTERED']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ['SDL_VIDEO_CENTERED'] = '1'\npygame.init()\npygame.mixer.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT),)\npygame.display.set_caption(os.getcwd().split(\"\\\\\")[-1] + \" - By RNT Development\")\nclock = pygame.time.Clock()\nplayer_group = pygame.sprite.GroupSingle()\ncolliders = pygame.sprite.Group()\nwalls = pygame.sprite.Group()\nblocks = pygame.sprite.Group()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT),)\npygame.display.set_caption(os.getcwd().split(\"\\\\\")[-1] + \" - By RNT Development\")\nclock = pygame.time.Clock()\nplayer_group = pygame.sprite.GroupSingle()\ncolliders = pygame.sprite.Group()\nwalls = pygame.sprite.Group()\nblocks = pygame.sprite.Group()\nbreaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\nplayer_group = pygame.sprite.GroupSingle()\ncolliders = pygame.sprite.Group()\nwalls = pygame.sprite.Group()\nblocks = pygame.sprite.Group()\nbreaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "player_group",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "player_group = pygame.sprite.GroupSingle()\ncolliders = pygame.sprite.Group()\nwalls = pygame.sprite.Group()\nblocks = pygame.sprite.Group()\nbreaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "colliders",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "colliders = pygame.sprite.Group()\nwalls = pygame.sprite.Group()\nblocks = pygame.sprite.Group()\nbreaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "walls",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "walls = pygame.sprite.Group()\nblocks = pygame.sprite.Group()\nbreaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "blocks",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "blocks = pygame.sprite.Group()\nbreaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nwall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "breaked_stuff",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "breaked_stuff = pygame.sprite.Group()\nplayer = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nwall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "player = Player(None, colliders)\nwall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nwall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nfor wall in walls.sprites():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wall_0",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "wall_0 = Wall((WIDTH / 2, HEIGHT / 2 + 200 + HEIGHT_MODIFIER ), (250, 50),player=player)\nwalls.add(wall_0)\nwall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nwall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nfor wall in walls.sprites():\n    colliders.add(wall)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wall",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "wall = Wall((WIDTH / 2, HEIGHT + HEIGHT_MODIFIER), (WIDTH, 50),player=player)\nwalls.add(wall)\nwall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nwall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nfor wall in walls.sprites():\n    colliders.add(wall)\n# all_sprites.add(player.hitbox)\nthrd = Informator(inf_q)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wall",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "wall = Wall((25, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nwall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nfor wall in walls.sprites():\n    colliders.add(wall)\n# all_sprites.add(player.hitbox)\nthrd = Informator(inf_q)\nthrd.start()\n# Цикл игры",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wall",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "wall = Wall((WIDTH, HEIGHT + HEIGHT_MODIFIER - 475), (50, 1000), mov=True,player=player)\nwalls.add(wall)\nfor wall in walls.sprites():\n    colliders.add(wall)\n# all_sprites.add(player.hitbox)\nthrd = Informator(inf_q)\nthrd.start()\n# Цикл игры\nrunning = True\ncalib = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "thrd",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "thrd = Informator(inf_q)\nthrd.start()\n# Цикл игры\nrunning = True\ncalib = 0\nlast_val = \"\"\nticky = 0\ncd = 0\ncalib_top_j_left = None\ncalib_top_j_right = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "running = True\ncalib = 0\nlast_val = \"\"\nticky = 0\ncd = 0\ncalib_top_j_left = None\ncalib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib = 0\nlast_val = \"\"\nticky = 0\ncd = 0\ncalib_top_j_left = None\ncalib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "last_val",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "last_val = \"\"\nticky = 0\ncd = 0\ncalib_top_j_left = None\ncalib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ticky",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ticky = 0\ncd = 0\ncalib_top_j_left = None\ncalib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cd",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cd = 0\ncalib_top_j_left = None\ncalib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_top_j_left",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_top_j_left = None\ncalib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_top_j_right",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_top_j_right = None\ncalib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_bottom_j_left",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_bottom_j_left = None\ncalib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory\nplayer_group.add(player)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_bottom_j_right",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_bottom_j_right = None\ncalib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory\nplayer_group.add(player)\ngen = Generator(player, wall_0)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_j_center",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_j_center = None\ncalib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory\nplayer_group.add(player)\ngen = Generator(player, wall_0)\ngui_coordinates = [WIDTH/2, HEIGHT/2]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_center_top",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_center_top = None\ncalib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory\nplayer_group.add(player)\ngen = Generator(player, wall_0)\ngui_coordinates = [WIDTH/2, HEIGHT/2]\ngui_group = GuiGroup()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_center_left",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_center_left = None\ncalib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory\nplayer_group.add(player)\ngen = Generator(player, wall_0)\ngui_coordinates = [WIDTH/2, HEIGHT/2]\ngui_group = GuiGroup()\ngui_group.add(inv.gui, inv.tick)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calib_center_right",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "calib_center_right = None\nclassi: Classifier = None\n# inventory = Inventory()\nplayer.inv = inventory\nplayer_group.add(player)\ngen = Generator(player, wall_0)\ngui_coordinates = [WIDTH/2, HEIGHT/2]\ngui_group = GuiGroup()\ngui_group.add(inv.gui, inv.tick)\ngui_group.add(ne_uni_gui.wardrobe)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "player.inv",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "player.inv = inventory\nplayer_group.add(player)\ngen = Generator(player, wall_0)\ngui_coordinates = [WIDTH/2, HEIGHT/2]\ngui_group = GuiGroup()\ngui_group.add(inv.gui, inv.tick)\ngui_group.add(ne_uni_gui.wardrobe)\ngui_group.add(ne_uni_gui.gui, ne_uni_gui.tick)\n# def blit_l(l, screen):\n#     for obj in l:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "gen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "gen = Generator(player, wall_0)\ngui_coordinates = [WIDTH/2, HEIGHT/2]\ngui_group = GuiGroup()\ngui_group.add(inv.gui, inv.tick)\ngui_group.add(ne_uni_gui.wardrobe)\ngui_group.add(ne_uni_gui.gui, ne_uni_gui.tick)\n# def blit_l(l, screen):\n#     for obj in l:\n#         screen.blit(obj.image, obj.rect)\ntp_anim_progress = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "gui_coordinates",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "gui_coordinates = [WIDTH/2, HEIGHT/2]\ngui_group = GuiGroup()\ngui_group.add(inv.gui, inv.tick)\ngui_group.add(ne_uni_gui.wardrobe)\ngui_group.add(ne_uni_gui.gui, ne_uni_gui.tick)\n# def blit_l(l, screen):\n#     for obj in l:\n#         screen.blit(obj.image, obj.rect)\ntp_anim_progress = 0\ntp_back_anim_active = False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "gui_group",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "gui_group = GuiGroup()\ngui_group.add(inv.gui, inv.tick)\ngui_group.add(ne_uni_gui.wardrobe)\ngui_group.add(ne_uni_gui.gui, ne_uni_gui.tick)\n# def blit_l(l, screen):\n#     for obj in l:\n#         screen.blit(obj.image, obj.rect)\ntp_anim_progress = 0\ntp_back_anim_active = False\ntp_anim_active = False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tp_anim_progress",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tp_anim_progress = 0\ntp_back_anim_active = False\ntp_anim_active = False\nlast_remembered_activ_state = False\ntp_anim_spd = 155/(TRANSPARENCY_ANIMATION_SPEED*30) \npygame.mouse.set_visible(False)\ntp_anim_ready = False\nwhile running:\n    if cd > 0:\n        cd -= 1",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tp_back_anim_active",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tp_back_anim_active = False\ntp_anim_active = False\nlast_remembered_activ_state = False\ntp_anim_spd = 155/(TRANSPARENCY_ANIMATION_SPEED*30) \npygame.mouse.set_visible(False)\ntp_anim_ready = False\nwhile running:\n    if cd > 0:\n        cd -= 1\n    clock.tick(FPS)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tp_anim_active",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tp_anim_active = False\nlast_remembered_activ_state = False\ntp_anim_spd = 155/(TRANSPARENCY_ANIMATION_SPEED*30) \npygame.mouse.set_visible(False)\ntp_anim_ready = False\nwhile running:\n    if cd > 0:\n        cd -= 1\n    clock.tick(FPS)\n    if ticky != 0:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "last_remembered_activ_state",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "last_remembered_activ_state = False\ntp_anim_spd = 155/(TRANSPARENCY_ANIMATION_SPEED*30) \npygame.mouse.set_visible(False)\ntp_anim_ready = False\nwhile running:\n    if cd > 0:\n        cd -= 1\n    clock.tick(FPS)\n    if ticky != 0:\n        ticky += 1",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tp_anim_spd",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tp_anim_spd = 155/(TRANSPARENCY_ANIMATION_SPEED*30) \npygame.mouse.set_visible(False)\ntp_anim_ready = False\nwhile running:\n    if cd > 0:\n        cd -= 1\n    clock.tick(FPS)\n    if ticky != 0:\n        ticky += 1\n    for event in pygame.event.get():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tp_anim_ready",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tp_anim_ready = False\nwhile running:\n    if cd > 0:\n        cd -= 1\n    clock.tick(FPS)\n    if ticky != 0:\n        ticky += 1\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "arduino_map",
        "kind": 2,
        "importPath": "simulator",
        "description": "simulator",
        "peekOfCode": "def arduino_map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\ndef setter(cords, jb, b1, b2,b3,b4,b5,b6):\n    ser.write(bytes(f\"{cords[0]} {cords[1]} {jb} 1: {b1} 2: {b2} 3: {b3} 4: {b4} 5: {b5} 6: {b6}\\n\", encoding=\"utf-8\"))\ndef cp(key):\n    return not keyboard.is_pressed(key)\nres = pyautogui.size()\nwhile True:\n    pos = pyautogui.position()\n    x = round(arduino_map(pos[0], 0, res[0], 0, 1024))",
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "setter",
        "kind": 2,
        "importPath": "simulator",
        "description": "simulator",
        "peekOfCode": "def setter(cords, jb, b1, b2,b3,b4,b5,b6):\n    ser.write(bytes(f\"{cords[0]} {cords[1]} {jb} 1: {b1} 2: {b2} 3: {b3} 4: {b4} 5: {b5} 6: {b6}\\n\", encoding=\"utf-8\"))\ndef cp(key):\n    return not keyboard.is_pressed(key)\nres = pyautogui.size()\nwhile True:\n    pos = pyautogui.position()\n    x = round(arduino_map(pos[0], 0, res[0], 0, 1024))\n    y = round(arduino_map(pos[1], 0, res[1], 0, 1024))\n    setter((x,y), int(cp(\"1\")), int(cp(\"2\")), int(cp(\"3\")), int(cp(\"4\")), int(cp(\"5\")), int(cp(\"6\")), int(cp(\"7\")))",
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "cp",
        "kind": 2,
        "importPath": "simulator",
        "description": "simulator",
        "peekOfCode": "def cp(key):\n    return not keyboard.is_pressed(key)\nres = pyautogui.size()\nwhile True:\n    pos = pyautogui.position()\n    x = round(arduino_map(pos[0], 0, res[0], 0, 1024))\n    y = round(arduino_map(pos[1], 0, res[1], 0, 1024))\n    setter((x,y), int(cp(\"1\")), int(cp(\"2\")), int(cp(\"3\")), int(cp(\"4\")), int(cp(\"5\")), int(cp(\"6\")), int(cp(\"7\")))\n    time.sleep(0.2)",
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "ser",
        "kind": 5,
        "importPath": "simulator",
        "description": "simulator",
        "peekOfCode": "ser = serial.Serial(\"COM8\")\ndef arduino_map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\ndef setter(cords, jb, b1, b2,b3,b4,b5,b6):\n    ser.write(bytes(f\"{cords[0]} {cords[1]} {jb} 1: {b1} 2: {b2} 3: {b3} 4: {b4} 5: {b5} 6: {b6}\\n\", encoding=\"utf-8\"))\ndef cp(key):\n    return not keyboard.is_pressed(key)\nres = pyautogui.size()\nwhile True:\n    pos = pyautogui.position()",
        "detail": "simulator",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "simulator",
        "description": "simulator",
        "peekOfCode": "res = pyautogui.size()\nwhile True:\n    pos = pyautogui.position()\n    x = round(arduino_map(pos[0], 0, res[0], 0, 1024))\n    y = round(arduino_map(pos[1], 0, res[1], 0, 1024))\n    setter((x,y), int(cp(\"1\")), int(cp(\"2\")), int(cp(\"3\")), int(cp(\"4\")), int(cp(\"5\")), int(cp(\"6\")), int(cp(\"7\")))\n    time.sleep(0.2)",
        "detail": "simulator",
        "documentation": {}
    }
]